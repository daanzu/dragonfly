# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import dragonfly_pb2 as dragonfly__pb2


class EngineStub(object):
  """The engine service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListGrammars = channel.unary_stream(
        '/dragonfly.rpc.Engine/ListGrammars',
        request_serializer=dragonfly__pb2.GrammarRequest.SerializeToString,
        response_deserializer=dragonfly__pb2.GrammarData.FromString,
        )


class EngineServicer(object):
  """The engine service definition.
  """

  def ListGrammars(self, request, context):
    """Methods to get information from the active engine.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EngineServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListGrammars': grpc.unary_stream_rpc_method_handler(
          servicer.ListGrammars,
          request_deserializer=dragonfly__pb2.GrammarRequest.FromString,
          response_serializer=dragonfly__pb2.GrammarData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dragonfly.rpc.Engine', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
