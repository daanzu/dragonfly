# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dragonfly.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='dragonfly.proto',
  package='dragonfly.rpc',
  syntax='proto3',
  serialized_pb=_b('\n\x0f\x64ragonfly.proto\x12\rdragonfly.rpc\"\x10\n\x0eGrammarRequest\"d\n\x0bGrammarData\x12\x0c\n\x04name\x18\x01 \x01(\t\x12&\n\x05rules\x18\x02 \x03(\x0b\x32\x17.dragonfly.rpc.RuleData\x12\x0f\n\x07\x65nabled\x18\x03 \x01(\x08\x12\x0e\n\x06\x61\x63tive\x18\x04 \x01(\x08\"W\n\x08RuleData\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05specs\x18\x02 \x03(\t\x12\x10\n\x08\x65xported\x18\x03 \x01(\x08\x12\x0e\n\x06\x61\x63tive\x18\x04 \x01(\x08\x12\x0c\n\x04type\x18\x05 \x01(\t2W\n\x06\x45ngine\x12M\n\x0cListGrammars\x12\x1d.dragonfly.rpc.GrammarRequest\x1a\x1a.dragonfly.rpc.GrammarData\"\x00\x30\x01\x42&\n\rdragonfly.rpcB\x0e\x44ragonflyProtoP\x01\xa2\x02\x02\x44Pb\x06proto3')
)




_GRAMMARREQUEST = _descriptor.Descriptor(
  name='GrammarRequest',
  full_name='dragonfly.rpc.GrammarRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=34,
  serialized_end=50,
)


_GRAMMARDATA = _descriptor.Descriptor(
  name='GrammarData',
  full_name='dragonfly.rpc.GrammarData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='dragonfly.rpc.GrammarData.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='rules', full_name='dragonfly.rpc.GrammarData.rules', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='enabled', full_name='dragonfly.rpc.GrammarData.enabled', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='active', full_name='dragonfly.rpc.GrammarData.active', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=52,
  serialized_end=152,
)


_RULEDATA = _descriptor.Descriptor(
  name='RuleData',
  full_name='dragonfly.rpc.RuleData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='dragonfly.rpc.RuleData.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='specs', full_name='dragonfly.rpc.RuleData.specs', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='exported', full_name='dragonfly.rpc.RuleData.exported', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='active', full_name='dragonfly.rpc.RuleData.active', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='type', full_name='dragonfly.rpc.RuleData.type', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=154,
  serialized_end=241,
)

_GRAMMARDATA.fields_by_name['rules'].message_type = _RULEDATA
DESCRIPTOR.message_types_by_name['GrammarRequest'] = _GRAMMARREQUEST
DESCRIPTOR.message_types_by_name['GrammarData'] = _GRAMMARDATA
DESCRIPTOR.message_types_by_name['RuleData'] = _RULEDATA
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

GrammarRequest = _reflection.GeneratedProtocolMessageType('GrammarRequest', (_message.Message,), dict(
  DESCRIPTOR = _GRAMMARREQUEST,
  __module__ = 'dragonfly_pb2'
  # @@protoc_insertion_point(class_scope:dragonfly.rpc.GrammarRequest)
  ))
_sym_db.RegisterMessage(GrammarRequest)

GrammarData = _reflection.GeneratedProtocolMessageType('GrammarData', (_message.Message,), dict(
  DESCRIPTOR = _GRAMMARDATA,
  __module__ = 'dragonfly_pb2'
  # @@protoc_insertion_point(class_scope:dragonfly.rpc.GrammarData)
  ))
_sym_db.RegisterMessage(GrammarData)

RuleData = _reflection.GeneratedProtocolMessageType('RuleData', (_message.Message,), dict(
  DESCRIPTOR = _RULEDATA,
  __module__ = 'dragonfly_pb2'
  # @@protoc_insertion_point(class_scope:dragonfly.rpc.RuleData)
  ))
_sym_db.RegisterMessage(RuleData)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\rdragonfly.rpcB\016DragonflyProtoP\001\242\002\002DP'))

_ENGINE = _descriptor.ServiceDescriptor(
  name='Engine',
  full_name='dragonfly.rpc.Engine',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=243,
  serialized_end=330,
  methods=[
  _descriptor.MethodDescriptor(
    name='ListGrammars',
    full_name='dragonfly.rpc.Engine.ListGrammars',
    index=0,
    containing_service=None,
    input_type=_GRAMMARREQUEST,
    output_type=_GRAMMARDATA,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_ENGINE)

DESCRIPTOR.services_by_name['Engine'] = _ENGINE

# @@protoc_insertion_point(module_scope)
